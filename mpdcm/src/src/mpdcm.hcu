//
// Author: Eduardo Aponte
// Copyright 2015 by Eduardo Aponte <aponteeduardo@gmail.com>
//
// Licensed under GNU General Public License 3.0 or later.
// Some rights reserved. See COPYING, AUTHORS.
//
// Revision log:
//

# ifndef DDM_HEADER
# define DDM_HEADER

# ifdef __CUDACC__

# include "math.h"
# include "curand_kernel.h"
# include "curand.h"
# include <stdio.h>

# define HANDLE_ERROR( err ) {if (err != cudaSuccess ) { \
        printf( "%s in %s at line %d\n", cudaGetErrorString( err ), \
                __FILE__, __LINE__ ); \
        exit( EXIT_FAILURE ); \
    }}

# define HANDLE_NULL( a ) {if (a == NULL) { \
                            printf( "Host memory failed in %s at line %d\n", \
                                    __FILE__, __LINE__ ); \
                            exit( EXIT_FAILURE );}}

# endif

# ifdef __CUDACC__
# define BDDM_EXTERN extern "C"
# else
# define BDDM_EXTERN
# endif

// Determines whether compile double or single precision

//# define MPDOUBLEFLAG

# ifdef MPDOUBLEFLAG
# define MPFLOAT double 
# else
# define MPFLOAT float
# endif

typedef enum { MF_TRUE, MF_FALSE } MatFlag;

typedef struct
{
    short int dim;
    MPFLOAT *arr;
} dbuff;

// Data structure for a set of concatenated sparse square matrices.

typedef struct
{
    int dim_x;  // Dimension of the matrices
    int n;     // Total number of matrices.
    int *i;
    int *j;
    MPFLOAT *v;
} sqsparse; 



//  Degrees of freedom 
typedef struct
{
    int dim_x;
    int dim_u;

    // This flag indicates whether the matrix should be used or not. 

    MatFlag fA;
    MatFlag fB;
    MatFlag fC;
    MatFlag fD;

    MPFLOAT *A;
    MPFLOAT *B;
    MPFLOAT *C;
    MPFLOAT *D;

    sqsparse *sB;
    sqsparse *sD;

    MPFLOAT *K; // Kappa 
    MPFLOAT *tau;

    MPFLOAT V0;
    MPFLOAT E0;
    MPFLOAT ln1_E0; // For optimization. 
    MPFLOAT lnE0; // For optimization.
    MPFLOAT k1;
    MPFLOAT k2;
    MPFLOAT k3;

    MPFLOAT alpha;
    MPFLOAT gamma;

} ThetaDCM;

// Fixed values 
typedef struct
{
    MPFLOAT dt; // Step size in the integration
    MPFLOAT dyu; // Ratio of the sampling rate of y and u.
    MPFLOAT de; // Precomputed h 
    char mode; // Either 'f' or 'c'. It's the type of array of the theta, i.e.
        //fortran or c.
} PThetaDCM;


// Arguments

typedef struct {
    MPFLOAT *x;
    MPFLOAT *y;
    MPFLOAT *u;
    ThetaDCM *p_theta;
    MPFLOAT *d_theta;
    PThetaDCM *p_ptheta;
    MPFLOAT *d_ptheta;
    sqsparse *sB;
    sqsparse *sD;

    int *jB;
    int *jD;
    int *iB;
    int *iD;
    MPFLOAT *vB;
    MPFLOAT *vD;

    int nx;
    int ny;
    int nu;
    int dp;
    int nt;
    int nb;
    unsigned int * errcode;
    } kernpars;



// Type def for the integrators. 

typedef int (*integrator)(kernpars);

// Kernel launchers 

typedef void (*klauncher)(kernpars, unsigned int*);

// Update of x

typedef void (*fupx)(dbuff, dbuff, dbuff, void *, void *, dbuff);

// Thread info. Needed for the synchronization of the adapted step methods.
typedef struct {
    unsigned int ns; // Number of data sets
    unsigned int cs; // Current data set.
} thr_info;

// ==========================================================================
// Function signatures
// ==========================================================================

BDDM_EXTERN
int mpdcm_fmri_euler( kernpars pars );
    /* 
    Integrate DCM using a parallel architecture with the euler method.

    x -- States. Will not be used explicitely.
    y -- Observables. Output will be stored here.
    u -- Input. Input to the process.
    theta -- Parameters
    d_theta -- Data of the parameters of variable size
    ptheta -- Priors and fixed values
    d_ptheta -- Data of the prior of variable size
    nx -- Dimensions of x
    nu -- Dimensions of u
    ny -- Dimensions of y
    dp -- Number of data points
    nt -- Size of theta second dimension
    nb -- Size of theta first dimension 
    */

BDDM_EXTERN
int mpdcm_fmri_kr4( kernpars pars );
    /* 
    Integrate DCM using a parallel architecture, with a kutta runga of 4th 
    order. 

    x -- States. Will not be used explicitely.
    y -- Observables. Output will be stored here.
    u -- Input. Input to the process.
    theta -- Parameters
    d_theta -- Data of the parameters of variable size
    ptheta -- Priors and fixed values
    d_ptheta -- Data of the prior of variable size
    nx -- Dimensions of x
    nu -- Dimensions of u
    ny -- Dimensions of y
    dp -- Number of data points
    nt -- Size of theta second dimension
    nb -- Size of theta first dimension 
    */

BDDM_EXTERN
int mpdcm_fmri_bs( kernpars pars  );
    /* 
    Integrate DCM using a parallel architecture, with a kutta runga of 4th 
    order. 

    x -- States. Will not be used explicitely.
    y -- Observables. Output will be stored here.
    u -- Input. Input to the process.
    theta -- Parameters
    d_theta -- Data of the parameters of variable size
    ptheta -- Priors and fixed values
    d_ptheta -- Data of the prior of variable size
    nx -- Dimensions of x
    nu -- Dimensions of u
    ny -- Dimensions of y
    dp -- Number of data points
    nt -- Size of theta second dimension
    nb -- Size of theta first dimension 
    */



#define DIM_X 5 

# ifdef __CUDACC__

// Constants for the integrators


#define DIM_PTHETA 3
#define DIM_DPTHETA 0

#define INDEX_X 0
#define INDEX_F 1
#define INDEX_S 2
#define INDEX_V 3
#define INDEX_Q 4


#define PRELOC_SIZE_X_KR4 3
#define PRELOC_SIZE_X_EULER 2
#define PRELOC_SIZE_X_BS 5

#define DIM_THETA 7

#define INDEX_V0 0
#define INDEX_E0 1
#define INDEX_K1 2
#define INDEX_K2 3
#define INDEX_K3 4
#define INDEX_ALPHA 5
#define INDEX_GAMMA 6

#define INDEX_LK1 0 
#define INDEX_LK2 1 
#define INDEX_LK3 2 

#define NUM_BLOCKS 12
#define NUM_THREADS 32

#define KRW1 0.16666666666
#define KRW2 0.33333333333
#define KRW3 0.33333333333
#define KRW4 0.16666666666

#define BSA1 0.5
#define BSA2 0.075

#define BSB1 0.2222222222222222
#define BSB2 0.3333333333333333
#define BSB3 0.4444444444444444

#define BSZ1 (-0.069444444444444)
#define BSZ2 0.083333333333333
#define BSZ3 0.111111111111111
#define BSZ4 (-0.125)

// Constat for the variable step model.

#define MINDY 1
#define MAXDY 64

#define MINTOL 0.000001
#define MAXTOL 0.001000


// Function signatures

__device__
MPFLOAT
dcm_dx(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_dxAD(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_dxBC(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_dxB(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_dxC(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_ds(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_df(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_dv(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_dq(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_lk1(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_lk2(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
MPFLOAT
dcm_lk3(dbuff x, dbuff y, dbuff u, void *p_theta, void *p_ptheta, int i);

__device__
void
dcm_upy(dbuff ox, dbuff y, dbuff u, void *theta, void *ptheta, dbuff nx);

__device__
void
dcm_upx_euler(dbuff ox, dbuff y, dbuff u, void *p_theta, void *p_ptheta,
    dbuff nx);

__device__
void
dcm_upx_kr4(dbuff ox, dbuff y, dbuff u, void *p_theta, void *p_ptheta,
    dbuff nx);

__device__
void
dcm_upx_bs(dbuff ox, dbuff y, dbuff u, void *p_theta, void *p_ptheta,
    dbuff nx, MPFLOAT* zs, thr_info tinfo);

__device__
void
dcm_upx_bs0(dbuff ox, dbuff y, dbuff u, void *p_theta, void *p_ptheta,
   dbuff nx);
__device__
void
bs_maxz(dbuff z);

__device__
void
dcm_int_euler(dbuff x, dbuff y, dbuff u, void *p_theta,
    void *p_ptheta, int dp, unsigned int *errcode);

__device__
void
dcm_int_kr4(dbuff x, dbuff y, dbuff u, void *p_theta,
    void *p_ptheta, int dp, unsigned int *errcode);

__device__
void
dcm_int_bs(dbuff x, dbuff y, dbuff u, void *p_theta,
    void *p_ptheta, int dp, unsigned int *errcode, thr_info tinfo);

__global__
void
kdcm_euler(kernpars pars, unsigned int *errcode);

__global__
void
kdcm_kr4(kernpars pars, unsigned int *errcode);

__global__
void
kdcm_bs(kernpars pars, unsigned int *errcode);

__host__
void
ldcm_euler(kernpars pars, unsigned int *errcode);

__host__
void
ldcm_kr4(kernpars pars, unsigned int *errcode);

__host__
void
ldcm_bs(kernpars pars, unsigned int *errcode);


# endif

// end cuda defines

# endif
